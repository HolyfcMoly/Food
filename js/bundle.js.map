{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,OAAO;AACb;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,OAAO;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe;;;;;;;;;;;;;;ACrHf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,8BAA8B;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU,MAAM,SAAS;AAC5C,0CAA0C,WAAW;AACrD,wCAAwC,WAAW;AACnD;AACA;AACA;AACA,kDAAkD,WAAW;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,IAAI,YAAY,WAAW;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iCAAiC;AACzD;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe;;;;;;;;;;;;;;;;AC/FgC;AACA;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,QAAQ,6DAAQ;AAChB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kDAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mDAAU;AAClB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe;;;;;;;;;;;;;;;;ACjIf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK;AACD;;;;;;;;;;;;;;;AC7DnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA,mBAAmB,UAAU,MAAM,SAAS;AAC5C;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C,MAAM,MAAM;AACZ;AACA;AACA;AACA;AACA,oDAAoD,WAAW;AAC/D;AACA,qCAAqC,WAAW;AAChD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA,+CAA+C,OAAO;AACtD;AACA;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA,+CAA+C,OAAO;AACtD;AACA;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,OAAO;AACtD;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,iEAAe;;;;;;;;;;;;;;AC7Kf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,+CAA+C;AAC/C,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,sDAAsD;AACtD,iDAAiD;AACjD,yDAAyD;AACzD;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,+BAA+B;AAC/B;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA,iEAAe;;;;;;;;;;;;;;AC3Cf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D,+DAA+D;AAC/D,0DAA0D;AAC1D,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,IAAI;AACvB,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe;;;;;;;;;;;;;;ACnEf;AACA,wCAAwC;AACxC,0CAA0C;AAC1C;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;;;;;;;UCZA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;ACNiC;AACE;AACA;AACF;AACE;AACA;AACE;AACM;AAC3C;AACA;AACA,wCAAwC,yDAAS;AACjD;AACA,EAAE,0DAAI;AACN,EAAE,2DAAK;AACP,EAAE,2DAAK;AACP,EAAE,0DAAI;AACN,EAAE,2DAAK;AACP,EAAE,2DAAK;AACP,EAAE,4DAAM;AACR,CAAC,E","sources":["webpack://64-project-food/./js/modules/calc.js","webpack://64-project-food/./js/modules/cards.js","webpack://64-project-food/./js/modules/forms.js","webpack://64-project-food/./js/modules/modal.js","webpack://64-project-food/./js/modules/slider.js","webpack://64-project-food/./js/modules/tabs.js","webpack://64-project-food/./js/modules/timer.js","webpack://64-project-food/./js/services/services.js","webpack://64-project-food/webpack/bootstrap","webpack://64-project-food/webpack/runtime/define property getters","webpack://64-project-food/webpack/runtime/hasOwnProperty shorthand","webpack://64-project-food/webpack/runtime/make namespace object","webpack://64-project-food/./js/script.js"],"sourcesContent":["function calculator() {\r\n    // Calculator\r\n    // получаем элемент для записи результата\r\n    const result = document.querySelector('.calculating__result span')\r\n    // получаем все значения для калькуляции\r\n    let sex, ratio, height, weight, age\r\n    // проверяем, получаем значение из хранилища и назначаем переменной\r\n    if(localStorage.getItem('sex')) {\r\n    sex = localStorage.getItem('sex')\r\n    } else { // если не установленно, то устанавливаем по умолчанию и записываем в хранилище\r\n    sex = 'female'\r\n    localStorage.setItem('sex', 'female')\r\n    }\r\n    // тоже самое\r\n    if(localStorage.getItem('ratio')) {\r\n        ratio = localStorage.getItem('ratio')\r\n    } else {\r\n        ratio = 1.375\r\n        localStorage.setItem('ratio', 1.375)\r\n    }\r\n    // FN которая проверяет есть ли значения в хранилище и запоминает данные на активном классе\r\n    function initLocalSettings(selector, activeClass) {\r\n    const elements = document.querySelectorAll(selector)\r\n    // перебираем элементы\r\n    elements.forEach(e => {\r\n        // удаляем класс активности\r\n        e.classList.remove(activeClass)\r\n        //получаем атрибут и сравниваем если он равен полученному из хранилища id то добавляем класс активности\r\n        if(e.getAttribute('id') === localStorage.getItem('sex')) {\r\n        e.classList.add(activeClass)\r\n        }\r\n        if(e.getAttribute('data-ratio') === localStorage.getItem('ratio')) {\r\n        e.classList.add(activeClass)\r\n        }\r\n        calcTotal() // вызываем FN расчетов т.к тут происходит расчет и меняются значения которые записаны в хранилище\r\n    })\r\n    }\r\n    initLocalSettings('#gender div', 'calculating__choose-item_active')\r\n    initLocalSettings('.calculating__choose_big div', 'calculating__choose-item_active')\r\n\r\n    function calcTotal() {\r\n    // проверка, если НЕ установленно хоть 1 одно значение то вывод будет пуст\r\n    if(!sex || !height || !weight || !age || !ratio) {\r\n        result.textContent = '____'\r\n        return\r\n    }\r\n    // расчет если выбран женский пол\r\n    if(sex === 'female') {\r\n        result.textContent = Math.round((447.6 + (9.2 * weight) + (3.1 * height) - (4.3 * age)) * ratio)\r\n    } else { //иначе расчет для мужского пола \r\n        result.textContent = Math.round((88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * age)) * ratio)\r\n    }\r\n    }\r\n    calcTotal() // вызываем FN \r\n    // FN для назначения класса активности в разных блоках\r\n    function getStaticInfo(selector, activeClass) {\r\n    // получаем элементы\r\n    const elements = document.querySelectorAll(selector)\r\n    // перебираем все элементы и вешаем обработчик клика\r\n    elements.forEach(el => {\r\n        el.addEventListener('click', (e) => {\r\n        // проверяем что если клик был по атрибуту с data-ratio то клик происходит на элементах с атрибутом\r\n        if(e.target.getAttribute('data-ratio')) {\r\n            ratio = +e.target.getAttribute('data-ratio')\r\n            // записываем данные в хранилище, рацион\r\n            localStorage.setItem('ratio', +e.target.getAttribute('data-ratio'))\r\n        } else {// иначе клик происходит на элементах в переменной sex с id\r\n            sex = e.target.getAttribute('id')\r\n            // записываем данные в хранилище, пол\r\n            localStorage.setItem('sex', e.target.getAttribute('id'))\r\n        }\r\n        // проверяем клики в консоли\r\n        console.log(ratio,sex)\r\n        //перебираем элементы и каждому удаляем класс активности\r\n        elements.forEach(el => {\r\n            el.classList.remove(activeClass)\r\n        })\r\n        // назначаем класс активности на 'кликнутый' элемент\r\n        e.target.classList.add(activeClass)\r\n        calcTotal() // вызываем FN расчетов\r\n        })\r\n    })\r\n    }\r\n    // вызываем FN для блоков с передачей элементов в родителях и назначаемого класса активности\r\n    getStaticInfo('#gender div', 'calculating__choose-item_active')\r\n    getStaticInfo('.calculating__choose_big div', 'calculating__choose-item_active')\r\n    // FN для записи данных с инпутов\r\n    function getDynamicInfo(selector) {\r\n    // назначаем переменную и передаем в нее определенный элемент со стр\r\n    const input = document.querySelector(selector)\r\n    // вешаем на инпут обработчик\r\n    input.addEventListener('input', () => {\r\n        // делаем проверку на то что в инпутах введены только цифры, если нет то меняем бордер\r\n        if(input.value.match(/\\D/g)) {\r\n        input.style.border = '1px solid red'\r\n        } else { // иначе убираем его\r\n        input.style.border = 'none'\r\n        }\r\n        // сравниваем инпут с инструкцией и записываем значение которое было передано\r\n        switch(input.getAttribute('id')) {\r\n        case 'height': height = +input.value \r\n        break // выходим из инструкции после найденного и назначенного значения\r\n        case 'weight': weight = +input.value \r\n        break\r\n        case 'age': age = +input.value\r\n        break\r\n        }\r\n        calcTotal() // вызываем FN расчетов\r\n    })\r\n    }\r\n    // calcTotal() вызывается каждый раз когда происходит изменение на стр(какого либо параметра для расчетов)\r\n    // вызываем FN для инпутов с разными параметрами\r\n    getDynamicInfo('#height')\r\n    getDynamicInfo('#weight')\r\n    getDynamicInfo('#age')\r\n}\r\n\r\nexport default calculator","function cards() {\r\n    // использование классов для карточек \r\n    class MenuCard {\r\n        constructor(src, alt, title, descr, price, parentSelector, ...classes) {\r\n        this.src = src\r\n        this.alt = alt\r\n        this.title = title\r\n        this.descr = descr\r\n        this.price = price\r\n        this.classes = classes\r\n        this.parent = document.querySelector(parentSelector)\r\n        this.transfer = 75\r\n        this.changeToRub()\r\n        }\r\n        // функция для конвертации валюты с $ в Руб\r\n        changeToRub() {\r\n        this.price = this.price * this.transfer\r\n        }\r\n        // функция для создания карточки \r\n        render() {\r\n        const elem = document.createElement('div') // создание контейнера \r\n        // проверяем что если (т.к classes это массив) длина его 0 то мы добавляем этому элементу строку(класс)\r\n        if(this.classes.length === 0) {\r\n            this.elem = 'menu__item'        // по умолчанию этот элемент содержит строку 'menu__item'\r\n            elem.classList.add(this.elem)\r\n        } else {                        // иначе, проходим по массиву(this.classes) и добавляем этот класс к elem('div')\r\n            this.classes.forEach(className => elem.classList.add(className))\r\n        }\r\n        /**\r\n         * если понадобиться добавить еще классы к div то на строчке this.elem = 'menu__item' нужно через пробел прописать классы которые хотим добавить\r\n         * после в блоке else обратится к this.classes.push() и прописать эти классы в строчку через , ('black', 'third') и т.д\r\n         */\r\n        // помещение контента карточки в верстку\r\n        \r\n        elem.innerHTML = `                        \r\n        <img src=${this.src} alt=${this.alt}>\r\n        <h3 class=\"menu__item-subtitle\">${this.title}</h3>\r\n        <div class=\"menu__item-descr\">${this.descr}</div>\r\n        <div class=\"menu__item-divider\"></div>\r\n        <div class=\"menu__item-price\">\r\n            <div class=\"menu__item-cost\">Цена:</div>\r\n            <div class=\"menu__item-total\"><span>${this.price}</span> руб/день</div>`\r\n        this.parent.append(elem) // DOM элемент в который мы помещаем наш элемент(карточку)\r\n        }\r\n    }\r\n    // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n    // const getResources = async (url) => {\r\n    //   const res = await fetch(url);\r\n        \r\n    //   if(!res.ok) {\r\n    //     throw new Error(`Could not fetch ${url}, status: ${res.status}`)\r\n    //   }\r\n\r\n    //   return await res.json()\r\n    // }\r\n\r\n    // getResources('http://localhost:3000/menu')\r\n    // .then(data => {\r\n    //   data.forEach(({img, altimg, title, descr, price}) => {\r\n    //     new MenuCard(img, altimg, title, descr, price, '.menu .container').render()\r\n    //   })\r\n    // })\r\n    // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n\r\n    // -------------------------------------------------------------------------------------------\r\n                        // src, alt, title, descr, price, parentSelector, ...classes\r\n    new MenuCard(\r\n        \"img/tabs/vegy.jpg\", \r\n        \"vegy\", \r\n        'Меню \"Фитнес\"',\r\n        'Меню \"Фитнес\" - это новый подход к приготовлению блюд: больше свежих овощей и фруктов. Продукт активных и здоровых людей. Это абсолютно новый продукт с оптимальной ценой и высоким качеством!', \r\n        15,\r\n        '.menu .container',    // то самое место куда мы кладем карточку\r\n    ).render()\r\n\r\n    new MenuCard(\r\n        \"img/tabs/elite.jpg\", \r\n        \"elite\", \r\n        'Меню “Премиум”',\r\n        'В меню “Премиум” мы используем не только красивый дизайн упаковки, но и качественное исполнение блюд. Красная рыба, морепродукты, фрукты - ресторанное меню без похода в ресторан!', \r\n        20,\r\n        '.menu .container',\r\n    ).render()\r\n\r\n    new MenuCard(\r\n        \"img/tabs/post.jpg\", \r\n        \"post\", \r\n        'Меню \"Постное\"',\r\n        'Меню “Постное” - это тщательный подбор ингредиентов: полное отсутствие продуктов животного происхождения, молоко из миндаля, овса, кокоса или гречки, правильное количество белков за счет тофу и импортных вегетарианских стейков.', \r\n        13,\r\n        '.menu .container',\r\n    ).render()\r\n    // -------------------------------------------------------------------------------------------\r\n}\r\n\r\nexport default cards","import { closeModal, openModal } from \"./modal\" // импортируем 2 FN\r\nimport { postData } from \"../services/services\" \r\n\r\nfunction form(formSelector, modalTimerId) {\r\n    // Forms \r\n    const forms = document.querySelectorAll(formSelector)\r\n\r\n    const message = {\r\n        loading: 'img/spinner.svg',\r\n        success: 'Спасибо! Скоро мы с вами свяжемся',\r\n        failed: 'Что то пошло не так...'\r\n    }\r\n    // -------------------------------------------------------------------------------------------\r\n    // forms.forEach(i => {\r\n    //     postData(i)\r\n    // })\r\n    // -------------------------------------------------------------------------------------------\r\n    // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n    forms.forEach(i => {\r\n        bindPostData(i) \r\n    })\r\n\r\n    // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n    //function bindPostData  при расскоментировании(++++++++) сменить название FN при (--------) postData\r\n    function bindPostData(form) {\r\n        form.addEventListener('submit', (e) => {\r\n        e.preventDefault()\r\n\r\n        let statusMessage = document.createElement('img')\r\n        statusMessage.src = message.loading\r\n        statusMessage.style.cssText = `\r\n        display: block;\r\n        margin: 0 auto;\r\n        `;\r\n        form.insertAdjacentElement('afterend', statusMessage)\r\n        // --------------------ЧЕРЕЗ XML--------------\r\n    // -------------------------------------------------------------------------------------------\r\n        // const request = new XMLHttpRequest()\r\n        // request.open('POST', 'server.php')\r\n        // // когда используется связка XMLHttpRequest и FormData заголовок устанавливать не нужно, он устанавливается автоматически\r\n        // // иначе будет ошибка\r\n        // // request.setRequestHeader('Content-type', 'multipart/form-data')\r\n        // request.setRequestHeader('Content-type', 'application/json')  // если сервер принимает данные в json\r\n        // const formData = new FormData(form)\r\n        // // для json данных\r\n        // const object = {}             \r\n        // formData.forEach(function(value, key) {\r\n        //     object[key] = value\r\n        // })\r\n        // // переводим объект в json формат\r\n        // const json = JSON.stringify(object)\r\n        \r\n        // request.send(json)\r\n        // // request.send(formData)\r\n\r\n        // request.addEventListener('load', () => {\r\n        //     if(request.status === 200) {\r\n        //     // console.log(request.response)\r\n        //     // statusMessage.textContent = message.success;\r\n        //     // form.reset()  // после отправки формы, очищаем инпуты\r\n        //     // setTimeout(() => {        \r\n        //     //   statusMessage.remove()    // через 2 секунды удаляем сообщение об удачной отправке\r\n        //     // }, 2000)\r\n        //     console.log(request.response)\r\n        //     showThanks(message.success);\r\n        //     statusMessage.remove()    \r\n        //     form.reset()  // после отправки формы, очищаем инпуты\r\n        //     } else {\r\n        //     showThanks(message.failed);\r\n        //     }\r\n        // })\r\n    // -------------------------------------------------------------------------------------------\r\n\r\n    // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n        const formData = new FormData(form)\r\n        const json = JSON.stringify(Object.fromEntries(formData.entries()))\r\n        postData('http://localhost:3000/requests', json)\r\n        .then((data) => {\r\n            console.log(data)\r\n            showThanks(message.success);\r\n            statusMessage.remove()    \r\n        })\r\n        .catch(() => {\r\n            showThanks(message.failed);\r\n        })\r\n        .finally(() => {\r\n          form.reset()  // после отправки формы, очищаем инпуты\r\n        })\r\n    // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n\r\n        })\r\n    }\r\n\r\n    function showThanks(message) {\r\n        const prevModalDialog = document.querySelector('.modal__dialog')\r\n        \r\n        prevModalDialog.classList.remove('show')\r\n        prevModalDialog.classList.add('hide')\r\n        openModal('.modal', modalTimerId)\r\n\r\n        const thanksModal = document.createElement('div')\r\n        thanksModal.classList.add('modal__dialog')\r\n        thanksModal.innerHTML = `\r\n        <div class =\"modal__content\">\r\n        <div class =\"modal__close\" data-close>×</div>\r\n        <div class =\"modal__title\">${message}</div>\r\n        </div>\r\n        `;\r\n\r\n        document.querySelector('.modal').append(thanksModal)\r\n        setTimeout(() => {\r\n        thanksModal.remove()\r\n        prevModalDialog.classList.add('show')\r\n        prevModalDialog.classList.remove('hide')\r\n        closeModal('.modal')\r\n        },4000)\r\n    }\r\n    // чтобы не было ошибки, надо запускать сервер(передаем в fetch адрес сервера) и json-server db.json(подключаем к базе данных)\r\n    fetch('http://localhost:3000/menu')\r\n        .then(data => data.json())\r\n        // .then(res => console.log(res))\r\n\r\n        //для того чтобы все работало нужно: скачать проект с github, скинуть все на сервер, в терминале прописать (npm i),\r\n        //расскоментировать блоки с (+++++++) и закоментировать блоки с (----------), \r\n        //в терминале прописать команду json-server (db.json) прописать свою базу\r\n        //вместо (http://localhost:3000/menu, http://localhost:3000/requests) \r\n        //прописать свой url\r\n}\r\n\r\nexport default form","function openModal(modalSelector, modalTimerId) {\r\n    const modal = document.querySelector(modalSelector);\r\n\r\n    modal.classList.add(\"show\");\r\n    modal.classList.remove(\"hide\");\r\n    document.body.style.overflow = \"hidden\";\r\n    console.log(modalTimerId)\r\n    if(modalTimerId) { // при условии что этот id был передан или вообще существует, то только тогда это FN будет запускаться\r\n        clearInterval(modalTimerId) //если пользователь открыл триггер модалки то заново модалка по таймауту не откроется\r\n    }\r\n}   \r\n\r\nfunction closeModal(modalSelector) {\r\n    const modal = document.querySelector(modalSelector);\r\n\r\n    modal.classList.remove(\"show\");\r\n    modal.classList.add(\"hide\");\r\n    document.body.style.overflow = \"\";\r\n}\r\n\r\nfunction modal(triggerSelector, modalSelector, modalTimerId) {\r\n    ////  Modal\r\n    const modalTriger = document.querySelectorAll(triggerSelector);\r\n    // const modalClose = document.querySelector(\"[data-close]\");\r\n    const modal = document.querySelector(modalSelector);\r\n    //если делать через toggle то modal.classList.toggle('show')\r\n    // в верстке добавить класс show => modal\r\n\r\n    // работать такое будет только с таким навешиванием обработчика, т.е надо использовать функцию\r\n    modalTriger.forEach((btns) => {\r\n        btns.addEventListener(\"click\", () => openModal(modalSelector, modalTimerId));\r\n    });\r\n\r\n    // здесь клик вешается на окно, но сам контент с текстом и формой это не окно, и если кликать по контенту то ничего закрываться не будет\r\n    modal.addEventListener(\"click\", (e) => {\r\n        // вешаем обработчик на окно\r\n        if (e.target === modal || e.target.getAttribute('data-close') == '') {\r\n        // проверка на то что клик был совершен именно в окне\r\n        closeModal(modalSelector); // закрываем окно\r\n        }\r\n    });\r\n\r\n    document.addEventListener(\"keydown\", (e) => {\r\n        // при нажатии на esc закрывать модальное окно\r\n        if (e.code == \"Escape\" && modal.classList.contains(\"show\")) {\r\n        // проверяем на то что был нажат esc и окно открыто\r\n        closeModal(modalSelector); // вызываем функцию закрытия\r\n        }\r\n    });\r\n\r\n    function showModalByScroll() {\r\n        if(window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight) {\r\n        openModal(modalSelector, modalTimerId)\r\n        window.removeEventListener('scroll', showModalByScroll)\r\n        }\r\n    }\r\n\r\n    window.addEventListener('scroll', showModalByScroll)\r\n}\r\n\r\nexport default modal\r\nexport {closeModal}\r\nexport {openModal}","function slider() {\r\n    // SLIDER \r\n\r\n    // создание класса для картинок слайдера\r\n    class slideImg {\r\n        constructor(src, alt, parent, ...classes) {\r\n        this.src = src  // img\r\n        this.alt = alt  // alt\r\n        this.classes = classes  // классы это массив и он пустой\r\n        this.parent = document.querySelector(parent)\r\n        }\r\n        // создаем метод класса\r\n        renderSlide() {\r\n        // добавляем новый элемент div\r\n        const element = document.createElement('div')\r\n        // проверяем классы и если их 0 то создаем новый и добавляем к элементу\r\n        if(this.classes.length === 0) {\r\n            this.element = 'offer__slide'\r\n            element.classList.add(this.element)\r\n        } else { // иначе проходим перебором и если уже есть класс мы еще добавляем тот который хотим \r\n            this.classes.forEach(className => element.classList.add(className))\r\n        }\r\n        // формируем верстку которую после апендим в родителя\r\n        element.innerHTML = `\r\n        <img src=${this.src} alt=${this.alt}>\r\n        `\r\n        this.parent.append(element)\r\n        }\r\n    }\r\n    // проходим циклом для создания экземпляров\r\n    for(let i = 4; i < 12; i++) {\r\n        new slideImg(\r\n        \"img/slider/pepper.jpg\",\r\n        \"pepper\",                            \r\n        '.offer__slider .offer__slider-wrapper .offer__slider-inner'   // родитель в которого мы добавляем новый экземпляр\r\n        ).renderSlide()\r\n    }\r\n\r\n    const slides = document.querySelectorAll('.offer__slide')\r\n    const slider = document.querySelector('.offer__slider')\r\n    const prev = document.querySelector('.offer__slider-prev')\r\n    const next = document.querySelector('.offer__slider-next')\r\n    const total = document.querySelector('#total')\r\n    const current = document.querySelector('#current')\r\n    const wrapper = document.querySelector('.offer__slider-wrapper')\r\n    const field = document.querySelector('.offer__slider-inner')\r\n    const width = window.getComputedStyle(wrapper).width      // получаем ширину обертки\r\n    // определяем начальный индекс слайдера\r\n    let slideIndex = 1\r\n    let offset = 0    // смещение слайдов\r\n    // проверяем что если длина слайдов меньше 10 то мы к total добавляем 0\r\n    if(slides.length < 10) {\r\n        total.textContent = `0${slides.length}`\r\n    } else {// иначе показываем просто общ значение\r\n        total.textContent = slides.length\r\n    }\r\n    // FN в которой проверяем что если индекс слайда меньше 10 то добавляем '0' к индексу слайда. иначе показываем номер тек слайда\r\n    function currentIndx() {\r\n        current.textContent = slideIndex < 10 ? `0${slideIndex}` : slideIndex\r\n        // if(slideIndex < 10) {\r\n        // current.textContent = `0${slideIndex}`\r\n        // } else {\r\n        //   current.textContent = slideIndex\r\n        // }\r\n    }\r\n    currentIndx()\r\n\r\n    function delDot(str) {\r\n        return str.replace(/\\D/g, '')\r\n    }\r\n    \r\n    // устанавливаем ширину слайдов\r\n    field.style.width = 100 * slides.length + '%';\r\n    field.style.display = 'flex';\r\n    field.style.transition = '0.5s all';\r\n    // скрываем все что за оберткой\r\n    wrapper.style.overflow = 'hidden'\r\n    //устанавливаем каждому слайду одинаковую ширину\r\n    slides.forEach(slide => {\r\n        slide.style.width = width\r\n    })\r\n    // назначаем слайдеру позицию relative\r\n    slider.style.position = 'relative';\r\n    //создаем список для пагинации\r\n    const indicators = document.createElement('ul')\r\n    const dots = [] // создаем пустой массив\r\n    //добавляем класс списку\r\n    indicators.classList.add('carousel-indicators')\r\n    // добавляем в блок слайдера новый блок(список)\r\n    slider.append(indicators)\r\n    // проходим циклом, и пока i будет меньше массива слайдов(всех слайдов) i будет увеличиваться на 1\r\n    for (let i = 0; i < slides.length; i++) {\r\n        // создаем точки \r\n        const dot = document.createElement('li')\r\n        //устанавливаем точкам атрибут и нумерацию начиная с 1(т.е 1 слайд это 1 точка, и т.д)\r\n        dot.setAttribute('data-slide-to', i + 1)\r\n        //добавляем точкам класс\r\n        dot.classList.add('dot')\r\n        // проверяем, если первая итерация то 1ой точке мы даем opacity 1\r\n        if(i == 0) {\r\n        dot.style.opacity = 1\r\n        }\r\n        // добавляем точки в список\r\n        indicators.append(dot)\r\n        dots.push(dot)    // добавляем в массив точки\r\n    }\r\n    // FN в которой перебираем массив точек и назначаем всем opacity .5. \r\n    function dotsStyle() {\r\n        dots.forEach(dot => dot.style.opacity = '.5')\r\n        //dots с индексом равным индексу слайда назначаем opacity 1\r\n        dots[slideIndex - 1].style.opacity = 1\r\n    }\r\n\r\n\r\n    next.addEventListener('click', () => {\r\n        //трансформируем строку width в number, уменьшаем на 2 символа(вырезаем px),\r\n        // и * на количество элементов массива slides, вычтенного из 1.\r\n        if(offset == delDot(width) * (slides.length - 1)) {\r\n        offset = 0  //ставим смещение на начало слайдов\r\n        } else { // если не послд слайд то при клике на стрелочку добавляется ширина еще одного слайда и происходит смещение\r\n        offset += +delDot(width)\r\n        }\r\n        // смещение по оси Х на ...px\r\n        field.style.transform = `translateX(-${offset}px)`\r\n        //если индекс слайда равен массиву слайдов(последнему слайду) то мы переходим на 1 слайд\r\n        if(slideIndex == slides.length) {\r\n        slideIndex = 1\r\n        } else {// если нет то мы увеличиваем индекс слайда на 1\r\n        slideIndex++\r\n        }\r\n\r\n        dotsStyle()\r\n        currentIndx()\r\n    })\r\n    prev.addEventListener('click', () => {\r\n        // тоже самое но если слайд является 1 то мы смещаемся на последний слайд\r\n        if(offset === 0) {\r\n        offset = delDot(width) * (slides.length - 1)\r\n        } else { // тоже самое но смещение в другую сторону\r\n        offset -= delDot(width)\r\n        }\r\n\r\n        field.style.transform = `translateX(-${offset}px)`\r\n        // если индекс равен 1 слайду при клике на пред кнопку мы переходим на последний слайд\r\n        if(slideIndex == 1) {\r\n        slideIndex = slides.length\r\n        } else {// иначе мы уменьшаем значение\r\n        slideIndex--\r\n        }\r\n\r\n        dotsStyle()\r\n        currentIndx()\r\n    })\r\n    //перебираем массив точек\r\n    dots.forEach(dot => {\r\n        // назначаем каждой обработчик клика\r\n        dot.addEventListener('click', (e) => {\r\n        // получаем значение атрибута на который был клик и присваиваем переменной\r\n        const slideTo = e.target.getAttribute('data-slide-to')\r\n        // присваиваем слайд индексу значение на котором был клик\r\n        slideIndex = slideTo\r\n        // вычисляем смещение поля со слайдами \r\n        offset = delDot(width) * (slideTo - 1)\r\n        // перемещаем поля со слайдами в зависимости от значения offset\r\n        field.style.transform = `translateX(-${offset}px)`\r\n        //вызов fn для обновления текущего слайда\r\n        currentIndx()\r\n        //вызов fn для обновления стиля точек для текущего слайда\r\n        dotsStyle()\r\n        })\r\n    })\r\n}\r\n\r\nexport default slider","function tabs() {\r\n    // tabs\r\n    const tabs = document.querySelectorAll(\".tabheader__item\");\r\n    const tabsContent = document.querySelectorAll(\".tabcontent\");\r\n    const tabsParent = document.querySelector(\".tabheader__items\");\r\n\r\n    function hideTabContent() {\r\n        // скрываем контент\r\n        tabsContent.forEach((item) => {\r\n        item.classList.add(\"hide\"); // добавляем класс hide всему контенту\r\n        item.classList.remove(\"show\", \"fade\"); // удаляем класс show\r\n        });\r\n        tabs.forEach((item) => {\r\n        // удаляем у всех табов класс активности\r\n        item.classList.remove(\"tabheader__item_active\");\r\n        });\r\n    }\r\n    function showTabContent(i = 0) {\r\n        //показываем контент. по умолчанию (i) это первый элемент\r\n        tabsContent[i].classList.add(\"show\", \"fade\"); // добавляем класс show. (i) это элемент которому добавляем\r\n        tabsContent[i].classList.remove(\"hide\"); // удаляем класс hide\r\n        tabs[i].classList.add(\"tabheader__item_active\"); // добавляем класс активности табам\r\n    }\r\n    hideTabContent(); // вызываем обе функции\r\n    showTabContent();\r\n\r\n    tabsParent.addEventListener(\"click\", (e) => {\r\n        // назначаем родителю табов вешаем обработчик (е) это объект события\r\n        const target = e.target; // для сокращения\r\n\r\n        if (target && target.classList.contains(\"tabheader__item\")) {\r\n        //проверяем что кликнули и клик был совершен в блоке родителя\r\n        tabs.forEach((item, i) => {\r\n            // перебираем все табы и передаем 2 аргумента\r\n            if (target == item) {\r\n            // item Это элемент, i это номер элемента по порядку\r\n            hideTabContent(); // проверяем что клик произошел по элементу и вызываем сначала hide функция\r\n            showTabContent(i); // после show с передачей в него номера по порядку по которому кликнули\r\n            }\r\n        });\r\n        }\r\n    });\r\n}\r\nexport default tabs","function timer() {\r\n    // timer\r\n    const deadline = \"2023-04-25\";\r\n\r\n    function getTimeRemaining(endtime) {\r\n        /**\r\n         * Date.parse(endtime) в этой части мы получаем конечное кол-во милсек от deadline(до которого надо досчитать)\r\n         * после мы отнимаем кол-во милсек от нашей текущей даты\r\n         */\r\n        const t = Date.parse(endtime) - Date.parse(new Date());\r\n        const days = Math.floor(t / (1000 * 60 * 60 * 24)); // делим милсек на кол-во милсек в 1 дне\r\n        const hours = Math.floor((t / (1000 * 60 * 60)) % 24); // в 1 часе, так же при помощи % мы получаем остаток от деления, получаем хвостик который не больше 24\r\n        const minutes = Math.floor((t / 1000 / 60) % 60); // в 1 минуте\r\n        const seconds = Math.floor((t / 1000) % 60); // в 1 секунде\r\n\r\n        return {\r\n        total: t,\r\n        days,\r\n        hours,\r\n        minutes,\r\n        seconds,\r\n        };\r\n    }\r\n    // f которая проверяет число в таймере и если оно однозначное(4,5,8...) мы добавляем 0 иначе возвращаем число(12,15,20...)\r\n    function getZero(num) {\r\n        if (num >= 0 && num < 10) {\r\n        return `0${num}`;\r\n        } else {\r\n        return num;\r\n        }\r\n    }\r\n    // selector это главный элем на странице для таймера\r\n    function setClock(selector, endtime) {\r\n        // создаем переменные в которые будем помещать элементы со страницы\r\n        const timer = document.querySelector(selector);\r\n        const days = timer.querySelector(\"#days\");\r\n        const hours = timer.querySelector(\"#hours\");\r\n        const minutes = timer.querySelector(\"#minutes\");\r\n        const seconds = timer.querySelector(\"#seconds\");\r\n        const timeInterval = setInterval(updateClock, 1000); // запускает updateClock каждую секунду\r\n\r\n        updateClock(); // вызываем ее до чтобы при обновлении страницы не моргал таймер и не показывал стандартные данные в html\r\n\r\n        // функция которая обновляет наш таймер\r\n        function updateClock() {\r\n            // расчет времени который остался на данную секунду, endtime это наш deadline который будет передаваться из setClock\r\n            const t = getTimeRemaining(endtime); // в t находиться объект из этой функции\r\n            // теперь записываем данные расчетов в элементы\r\n            days.innerHTML = getZero(t.days);\r\n            hours.innerHTML = getZero(t.hours);\r\n            minutes.innerHTML = getZero(t.minutes);\r\n            seconds.innerHTML = getZero(t.seconds);\r\n            // проверяем что если таймер закончился и дошел до deadline то мы его останавливаем\r\n            if (t.total <= 0) {\r\n                clearInterval(timeInterval);\r\n                // после остановки таймера/достижения deadline, таймер приобретает вид 00 чтобы не уходил в отрицание\r\n                days.innerHTML = \"00\";\r\n                hours.innerHTML = \"00\";\r\n                minutes.innerHTML = \"00\";\r\n                seconds.innerHTML = \"00\";\r\n            }\r\n        }\r\n    }\r\n    // запускаем функцию и передаем блок таймера и конечную точку\r\n    setClock(\".timer\", deadline);\r\n}\r\n\r\nexport default timer","// FN настраивает наш запрос на сервер, получает ответ\r\nconst postData = async (url, data) => { // асинхронный код async и await работают только в паре\r\n    const res = await fetch(url, {        // JS будет ждать выполнения результата из за await \r\n        method: 'POST',\r\n            headers: {\r\n            'Content-type': 'application/json'\r\n            },\r\n            body: data\r\n    })\r\n  // трансформирует ответ в json. Объект мб большим и мы не знаем сколько понадобиться времени поэтому ставим await\r\nreturn await res.json() \r\n}\r\n\r\nexport {postData}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import tabs from './modules/tabs'\r\nimport modal from './modules/modal'\r\nimport timer from './modules/timer'\r\nimport calc from './modules/calc'\r\nimport cards from './modules/cards'\r\nimport forms from './modules/forms'\r\nimport slider from './modules/slider'\r\nimport { openModal } from './modules/modal'\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n\r\n  const modalTimerId = setTimeout(() => openModal('.modal', modalTimerId), 50000)\r\n\r\n  tabs()\r\n  modal(\"[data-modal]\", \".modal\", modalTimerId)\r\n  timer()\r\n  calc()\r\n  cards()\r\n  forms('form', modalTimerId)\r\n  slider()\r\n});"],"names":[],"sourceRoot":""}